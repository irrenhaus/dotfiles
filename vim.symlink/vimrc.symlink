set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

"Plugin 'ervandew/supertab'

" Color themes
" Plugin 'tomasr/molokai'
Plugin 'nanotech/jellybeans.vim'

" YouCompleteMe autocompletion engine
" Plugin 'Valloric/YouCompleteMe'

" Color coding for parantheses
Plugin 'kien/rainbow_parentheses.vim'

" Syntastic syntax highlighting
Plugin 'scrooloose/syntastic'

" Better status line
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Support auto-formatting of code via external autoformatters
" Plugin 'Chiel92/vim-autoformat'

" Needed by unite and neocomplete
Plugin 'Shougo/vimproc.vim'
" Unite.vim
Plugin 'Shougo/unite.vim'

" Support most recently used files in unite.vim
Plugin 'Shougo/neomru.vim'

" neocomplete auto-completion
" Plugin 'Shougo/neocomplete.vim'
" Plugin 'Shougo/context_filetype.vim'
" Plugin 'Shougo/neoinclude.vim'

" Display line indentation marks
Plugin 'Yggdroot/indentLine'

" Deletes a trailing EOL from files on save (if it is there)
Plugin 'PreserveNoEOL'

" Maps Groovy syntax to gradle files
Plugin 'tfnico/vim-gradle'

" Generates .sh files for a airline-like prompt
Plugin 'edkolev/promptline.vim'

" Only GIT: Show changed/added/deleted lines in the signs-column
Plugin 'airblade/vim-gitgutter'

" Preview of %s changes
Plugin 'osyo-manga/vim-over'

Plugin 'mbbill/undotree'

" Auto-close parentheses
Plugin 'Townk/vim-autoclose'

" Sublime Text style multiple cursors
" Plugin 'vim-multiple-cursors'

" golang support
Plugin 'fatih/vim-go'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

set hidden

set background=dark

let mapleader=','

" GVim settings
set guifont=Envy\ Code\ R\ for\ Powerline\ 10
" Autoselect: Automatically yank visual selection into "* register
set guioptions+=a
" Use console dialogs instead of popup dialogs
set guioptions+=c
" Disable toolbar
set guioptions-=T
" Disable menu
" set guioptions-=m

" RainbowParantheses Config Start
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 14
let g:rbpt_loadcmd_toggle = 0
" RainbowParantheses Config End

syntax on
filetype plugin indent on
colorscheme jellybeans

" Damn you Arduino!
au BufNewFile,BufRead *.ino set filetype=cpp

" Rust
au BufNewFile,BufRead *.rs set filetype=rust

" Set utf8 as standard encoding
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Turn backup off, since most stuff is in SVN, git, etc anyway...
set nobackup
set nowb
set noswapfile

set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab

if !has('nvim')
    set term=xterm-256color
endif

" Load the RainbowParentheses and activate them upon VIM startup
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Sets how many lines of history VIM has to remember
set history=1024

" Set to auto read when a file is changed from the outside
set autoread

" Word wrapping after 80 characters
set tw=80
set fo-=t
"set wrap

" Enable the wildmenu (better auto completion for files in command line)
set wildmenu
set wildmode=longest:full,full

" Always have 7 lines from screen edge to the cursor
set so=5

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

" Let the netrw file explorer ignore specific filetypes (comma separated)
let g:netrw_list_hide= '.*\.swp$,.*\.pyc$,.*\.o$,.*~$'

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Activate line numbers
set number
" Set line number style for console
:highlight LineNr ctermfg=grey
" and GUI
:highlight LineNr guifg=#868686

" Automatically detect *.md files as Markdown files
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Open new split panes to right and bottom
set splitbelow
set splitright

let g:miniBufExplBRSplit = 0   " Put new window above
                               " current or on the
                               " left for vertical split

" let g:neocomplete#enable_at_startup = 0 "default 0
" let g:neocomplete#enable_smart_case = 1
" let g:neocomplete#enable_cursor_hold_i = 1

" Syntastic
let g:syntastic_enable_signs = 1
let g:syntastic_enable_balloons = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_aggregate_errors = 1
" Default = 2 (auto close but not open)
let g:syntastic_auto_loc_list = 2
let g:syntastic_markdown_checkers = ['mdl']
let g:syntastic_javascript_checkers = ['eslint']

" Airline
set laststatus=2 " Always display the statusline in all windows
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline_theme='wombat'

" vim-go
let g:go_fmt_command = "goimports"

let g:go_auto_type_info = 1

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_build_constraints = 1
" disable if vim behaves sluggish
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1

" Sometimes when using both vim-go and syntastic Vim will start lagging while saving and opening files. The following fixes this:
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:go_list_type = "quickfix"

" Unite
" Use fuzzy search and sort results by rank
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

let g:unite_source_history_yank_enable = 1
" Use ag command instead of the find/grep command for file_rec/async
let g:unite_source_rec_async_command= 'ag --nocolor --nogroup --hidden -g ""'

" KEYMAPPINGS

" Open/Close foldings in normal mode with space
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" Tab changes
:nmap \t2 :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>
:nmap \t4 :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
:nmap \t8 :set expandtab tabstop=8 shiftwidth=8 softtabstop=8<CR>

" Unite
" -no-split?
nnoremap <C-p> :Unite -start-insert buffer file_rec/async file_mru -auto-preview<CR>
nnoremap <Leader>l :Unite -start-insert line -auto-preview<CR>
nnoremap <Leader>m :Unite -start-insert mapping -auto-preview<CR>
nnoremap <space>/ :Unite grep:.<CR>
nnoremap <space>y :Unite history/yank<CR>
nnoremap <space>/ :Unite grep:.<CR>
vnoremap <space>( :call VisualSelection('ug')<CR>
" OMG UNITE!

" Map Up and Down keys to move one row instead of one line (wrapped lines
" stuff)
map <Down> gj
map <Up> gk

" Map Ctrl+Up and Ctrl+Down to scroll window
map <C-Down> <C-E>
map <C-Up> <C-Y>

" I want word movements on Ctrl + Arrows instread of WORD movements
map <C-Right> w
map <C-Left> b

nmap \q :nohlsearch<CR>

" Map Shift + Arrows to switch between windows
nmap <S-Up>    <C-W><Up>
nmap <S-Down>  <C-W><Down>
nmap <S-Left>  <C-W><Left>
nmap <S-Right> <C-W><Right>

nnoremap <F4> :UndotreeToggle<cr>
" Nicer buffer switchting on F6
nnoremap <F6> :buffers<CR>:buffer<Space>
" F9 : Toggle auto line wrapping
map <F9> :call ToggleTextWrap()<CR>
" F10: Highlight too long lines
map<F10> :call ToggleHighlightLongLines()<CR>
" F12:  Toggle line numbers
map <F12> :set nonumber!<CR>:IndentLinesToggle<CR>

" See http://vim.wikia.com/wiki/Accessing_the_system_clipboard
" Visual mode: F7 to copy current selection to clipboard
vmap <F7> "+ygv"+y`>
" Visual Mode Ctrl-F7: Overwrite selection with clipboard cursor
vmap <C-F7> "+p`]
" F7: Paste clipboard after cursor
nmap <F7> "+gp
" Shift-F7: Paste clipboard before cursor
nmap <S-F7> "+gP

" vim-go
au FileType go nmap <leader>gr <Plug>(go-run)
au FileType go nmap <leader>gb <Plug>(go-build)
au FileType go nmap <leader>gt <Plug>(go-test)
au FileType go nmap <leader>gc <Plug>(go-coverage)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gs <Plug>(go-implements)
au FileType go nmap <Leader>gi <Plug>(go-info)
au FileType go nmap <Leader>gre <Plug>(go-rename)

""""" Helper function from http://amix.dk/vim/vimrc.html
" Visual mode: search & highlight current selection (* -> forward, # -> backward)
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    elseif a:direction == 'ug'
        execute "Unite grep:.::" . l:pattern
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Thanks to http://wtf.hijacked.us/wiki/index.php/Vim
" Global tracker var
let g:HighlightLongLines = 0 "set to 0 so we can run it to enable
" Function to toggle highlighting of lines longer than 80 character
" It also toggles textwidth to 80 so newlines are forced when typing
fu! ToggleHighlightLongLines()
   if(g:HighlightLongLines == 1)
           " Disable highlighting and textwidth
           highlight clear rightMargin
           set textwidth=0
           let g:HighlightLongLines = 0
   else
           " Enable highlighting and textwidth
           set textwidth=80
           highlight rightMargin ctermbg=LightRed guibg=LightRed
           match rightMargin /\%>81v/
           let g:HighlightLongLines = 1
   endif
endfunction

function! ToggleTextWrap()
    if &fo =~ 't'
        set fo-=t
    else
        set fo+=t
    endif
endfunction
