set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

"Plugin 'ervandew/supertab'

" Color themes
" Plugin 'tomasr/molokai'
Plugin 'nanotech/jellybeans.vim'

" YouCompleteMe autocompletion engine
" Plugin 'Valloric/YouCompleteMe'

" Color coding for parantheses
Plugin 'kien/rainbow_parentheses.vim'

" NERDTree file exploration sidebar
" Plugin 'scrooloose/nerdtree'

" Show GIT informations in nerdtree
" Plugin 'Xuyuanp/nerdtree-git-plugin'

" Syntastic syntax highlighting
Plugin 'scrooloose/syntastic'

" Automated tag generation and syntax highlighting in Vim
" Plugin 'xolox/vim-easytags'

" A sidebar showing tags for the current file
" Plugin 'majutsushi/tagbar'

" Better status line
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Support auto-formatting of code via external autoformatters
" Plugin 'Chiel92/vim-autoformat'

" Needed by unite and neocomplete
Plugin 'Shougo/vimproc.vim'
" Unite.vim
Plugin 'Shougo/unite.vim'

" Support most recently used files in unite.vim
Plugin 'Shougo/neomru.vim'

" neocomplete auto-completion
Plugin 'Shougo/neocomplete.vim'
Plugin 'Shougo/context_filetype.vim'
Plugin 'Shougo/neoinclude.vim'

" Support .local.vimrc files in each directory
" Plugin 'thinca/vim-localrc'

" Support editorconfig files
" Plugin 'editorconfig/editorconfig-vim'

" Tabular makes it easy to line up text
" Plugin 'godlygeek/tabular'

" Plugin 'wting/rust.vim'

" Plugin 'StanAngeloff/php.vim'

" Plugin 'plasticboy/vim-markdown'
" Plugin 'suan/vim-instant-markdown'

" Displayline indentation marks
Plugin 'Yggdroot/indentLine'

" Deletes a trailing EOL from files on save (if it is there)
Plugin 'PreserveNoEOL'

" JavaScript & Angular
Plugin 'burnettk/vim-angular'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'claco/jasmine.vim'
Plugin 'Shutnik/jshint2.vim'

" Ultisnippets
" Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
" Plugin 'honza/vim-snippets'

" Snippets for AngularJS
" Plugin 'matthewsimo/angular-vim-snippets'

" Maps Groovy syntax to gradle files
Plugin 'tfnico/vim-gradle'

" TernJS - Intelligent autocompletion & code parsing for JS
" Plugin 'marijnh/tern_for_vim'

" Generates .sh files for a airline-like prompt
Plugin 'edkolev/promptline.vim'

" Only GIT: Show changed/added/deleted lines in the signs-column
Plugin 'airblade/vim-gitgutter'

" Preview of %s changes
Plugin 'osyo-manga/vim-over'

" Narrow region editing: Edit a specific region of a buffer
" Plugin 'chrisbra/NrrwRgn'

Plugin 'mbbill/undotree'

" Auto-close parentheses
Plugin 'Townk/vim-autoclose'

" Sublime Text style multiple cursors
" Plugin 'vim-multiple-cursors'

" golang support
Plugin 'fatih/vim-go'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

set hidden

set background=dark

let mapleader=','

" GVim settings
set guifont=Envy\ Code\ R\ for\ Powerline\ 10
" Autoselect: Automatically yank visual selection into "* register
set guioptions+=a
" Use console dialogs instead of popup dialogs
set guioptions+=c
" Disable toolbar
set guioptions-=T
" Disable menu
" set guioptions-=m

" OMNI SyntaxComplete

"if has("autocmd") && exists("+omnifunc")
"    autocmd Filetype *
"        \ if &omnifunc == "" |
"        \ setlocal omnifunc=syntaxcomplete#Complete |
"        \ endif
"endif

" RainbowParantheses Config Start
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 14
let g:rbpt_loadcmd_toggle = 0
" RainbowParantheses Config End

syntax on
filetype plugin indent on
colorscheme jellybeans

" Damn you Arduino!
au BufNewFile,BufRead *.ino set filetype=cpp

" Rust
au BufNewFile,BufRead *.rs set filetype=rust

" Set utf8 as standard encoding
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab

if !has('nvim')
    set term=xterm-256color
endif

" Load the RainbowParentheses and activate them upon VIM startup
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Sets how many lines of history VIM has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread

" Word wrapping after 80 characters
set tw=80
set fo-=t
"set wrap

" Enable the wildmenu (better auto completion for files in command line)
set wildmenu
set wildmode=longest:full,full

" Always have 7 lines from screen edge to the cursor
set so=7

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

" Let the netrw file explorer ignore specific filetypes (comma separated)
let g:netrw_list_hide= '.*\.swp$,.*\.pyc$,.*\.o$,.*~$'

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Open NERDTree upon startup (if no files were specified)
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Change the VIM working directory upon root change of the NERDTree
let NERDTreeChDirMode=2

" Close Vim if the last window left is NERD-Tree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Activate line numbers
set number
" Set line number style for console
:highlight LineNr ctermfg=grey
" and GUI
:highlight LineNr guifg=#868686

" Automatically detect *.md files as Markdown files
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Open new split panes to right and bottom
set splitbelow
set splitright

" Search the tree for ctags, not just the current directory
set tags=./tags;/


let g:miniBufExplBRSplit = 0   " Put new window above
                               " current or on the
                               " left for vertical split

" YCM configuration
"let g:ycm_autoclose_preview_window_after_completion=1
" 
" let g:ycm_register_as_syntastic_checker = 1 "default 1
" let g:Show_diagnostics_ui = 1 "default 1
" 
" let g:ycm_enable_diagnostic_signs = 1
" let g:ycm_enable_diagnostic_highlighting = 1
" let g:ycm_always_populate_location_list = 1 "default 0
" let g:ycm_open_loclist_on_ycm_diags = 1 "default 1
" 
" let g:ycm_complete_in_strings = 1 "default 1
" let g:ycm_collect_identifiers_from_tags_files = 1 " default 0
" let g:ycm_path_to_python_interpreter = '' "default ''
" 
" let g:ycm_server_use_vim_stdout = 0 "default 0 (logging to console)
" let g:ycm_server_log_level = 'info' "default info
" 
" let g:ycm_global_ycm_extra_conf = '$HOME/.ycm_extra_conf.py'  "where to search for .ycm_extra_conf.py if not found
" let g:ycm_confirm_extra_conf = 1
" 
" let g:ycm_goto_buffer_command = 'same-buffer' "[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab' ]
" let g:ycm_filetype_whitelist = { '*': 1 }
" let g:ycm_key_invoke_completion = '<C-Space>'
" 
" let g:ycm_filetype_specific_completion_to_disable = {
"       \ 'gitcommit': 1,
"       \ 'html': 1
"       \}

let g:neocomplete#enable_at_startup = 0 "default 0
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_cursor_hold_i = 1

" Syntastic
let g:syntastic_enable_signs = 1
let g:syntastic_enable_balloons = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_aggregate_errors = 1
" Default = 2 (auto close but not open)
let g:syntastic_auto_loc_list = 2
let g:syntastic_markdown_checkers = ['mdl']
let g:syntastic_javascript_checkers = ['eslint']

" javascript-libraries-syntax
"    jQuery: jquery
"    underscore.js: underscore
"    Lo-Dash: underscore
"    Backbone.js: backbone
"    prelude.ls: prelude
"    AngularJS: angularjs
"    AngularUI: angularui
"    React: react
"    Flux: flux
"    RequireJS: requirejs
"    Sugar.js: sugar
"    Jasmine: jasmine
"    Chai: chai
"    Handlebars: handlebars
let g:used_javascript_libs = 'jquery,angularjs,jasmine'

" Powerline
" set laststatus=2 " Always display the statusline in all windows
" set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)

" Airline
set laststatus=2 " Always display the statusline in all windows
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline_theme='wombat'

" vim-go
let g:go_fmt_command = "goimports"

" Unite
" Use fuzzy search and sort results by rank
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

let g:unite_source_history_yank_enable = 1
" Use ag command instead of the find/grep command for file_rec/async
let g:unite_source_rec_async_command= 'ag --nocolor --nogroup --hidden -g ""'

" MARKDOWN
let g:VMEPextensions = ['extra', 'codehilite', 'headerid', 'meta', 'nl2br', 'sane_lists', 'toc']

" Indent Line
" let g:indentLine_color_term = 239
" let g:indentLine_color_gui = '#09AA08'
" let g:indentLine_char = '|'

" Ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<C-s>"
"let g:UltiSnipsJumpForwardTrigger="<C-d>"
"let g:UltiSnipsJumpBackwardTrigger="<C-f>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:UltiSnipsSnippetDirectories=["UltiSnips"]

" Ultisnips / YCM compatibility
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" KEYMAPPINGS

" Open/Close foldings in normal mode with space
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" Tab changes
:nmap \t2 :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>
:nmap \t4 :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
:nmap \t8 :set expandtab tabstop=8 shiftwidth=8 softtabstop=8<CR>

" Unite
" -no-split?
nnoremap <C-p> :Unite -start-insert buffer file_rec/async file_mru -auto-preview<CR>
nnoremap <Leader>l :Unite -start-insert line -auto-preview<CR>
nnoremap <Leader>m :Unite -start-insert mapping -auto-preview<CR>
nnoremap <space>/ :Unite grep:.<CR>
nnoremap <space>y :Unite history/yank<CR>
nnoremap <space>/ :Unite grep:.<CR>
vnoremap <space>( :call VisualSelection('ug')<CR>
" OMG UNITE!

" Map Up and Down keys to move one row instead of one line (wrapped lines
" stuff)
map <Down> gj
map <Up> gk

" Map Ctrl+Up and Ctrl+Down to scroll window
map <C-Down> <C-E>
map <C-Up> <C-Y>

" I want word movements on Ctrl + Arrows instread of WORD movements
map <C-Right> w
map <C-Left> b

nmap \q :nohlsearch<CR>

" Map Shift + Arrows to switch between windows
nmap <S-Up>    <C-W><Up>
nmap <S-Down>  <C-W><Down>
nmap <S-Left>  <C-W><Left>
nmap <S-Right> <C-W><Right>

map <F2> :NERDTreeToggle<CR>
noremap <F3> :Autoformat<CR><CR>
nnoremap <F4> :UndotreeToggle<cr>
nnoremap <F5> :YcmCompleter GoToDefinitionElseDeclaration<CR>
" Nicer buffer switchting on F6
nnoremap <F6> :buffers<CR>:buffer<Space>
nmap <F8> :TagbarToggle<CR>
" F9 : Toggle auto line wrapping
map <F9> :call ToggleTextWrap()<CR>
" F10: Highlight too long lines
map<F10> :call ToggleHighlightLongLines()<CR>
" F12:  Toggle line numbers
map <F12> :set nonumber!<CR>:IndentLinesToggle<CR>

nnoremap <F11> :YcmForceCompileAndDiagnostics <CR>

" See http://vim.wikia.com/wiki/Accessing_the_system_clipboard
" Visual mode: F7 to copy current selection to clipboard
vmap <F7> "+ygv"+y`>
" Visual Mode Ctrl-F7: Overwrite selection with clipboard cursor
vmap <C-F7> "+p`]
" F7: Paste clipboard after cursor
nmap <F7> "+gp
" Shift-F7: Paste clipboard before cursor
nmap <S-F7> "+gP

if exists(":Tabularize")
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
    nmap <Leader>a: :Tabularize /:\zs<CR>
    vmap <Leader>a: :Tabularize /:\zs<CR>
endif

""""" Helper function from http://amix.dk/vim/vimrc.html
" Visual mode: search & highlight current selection (* -> forward, # -> backward)
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    elseif a:direction == 'ug'
        execute "Unite grep:.::" . l:pattern
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Thanks to http://wtf.hijacked.us/wiki/index.php/Vim
" Global tracker var
let g:HighlightLongLines = 0 "set to 0 so we can run it to enable
" Function to toggle highlighting of lines longer than 80 character
" It also toggles textwidth to 80 so newlines are forced when typing
fu! ToggleHighlightLongLines()
   if(g:HighlightLongLines == 1)
           " Disable highlighting and textwidth
           highlight clear rightMargin
           set textwidth=0
           let g:HighlightLongLines = 0
   else
           " Enable highlighting and textwidth
           set textwidth=80
           highlight rightMargin ctermbg=LightRed guibg=LightRed
           match rightMargin /\%>81v/
           let g:HighlightLongLines = 1
   endif
endfunction

function! ToggleTextWrap()
    if &fo =~ 't'
        set fo-=t
    else
        set fo+=t
    endif
endfunction
